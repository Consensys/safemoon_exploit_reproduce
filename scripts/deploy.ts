import { ethers } from "hardhat";

async function runTx(tx: Promise<any>, msg?: string) {
  const res = await tx;
  const rx = await res.wait();

  if (msg) {
    console.log(msg);
  }
  return rx;
}

async function main() {
  const signers = await ethers.getSigners();
  const sm = await ethers.deployContract("Safemoon", []);
  const deployer = signers[0];
  const burnBridge = signers[1];
  const minter = deployer;
  const user1 = signers[2];
  const user2 = signers[3];

  await sm.waitForDeployment();

  console.log(`Safemoon deployed to ${sm.target}`);

  let rx = await runTx(sm.initialize());
  const supply = 10 ** 9;
  const user1Balance = 10 ** 6;

  await runTx(
    sm.transfer(burnBridge.address, supply),
    `Transfer ${supply} to bridge burn addr ${burnBridge.address}`
  );

  await runTx(
    sm.setBridgeBurnAddress(burnBridge.address),
    `Set bridge burn addr to ${burnBridge.address}`
  );

  await runTx(
    sm.setWhitelistMint(minter.address),
    `Whitelist ${minter.address} as minter`
  );

  await runTx(
    sm.mint(user1.address, user1Balance),
    `Mint ${user1Balance} to ${user1.address}`
  );

/*
  await runTx(
    sm.connect(user2).burn(user1.address, user1Balance),
    `Burned ${user1Balance} of ${user1.address} from ${user2.address}`
  );
*/
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
